// Browser Debug Script - Im Browser-Konsole ausf√ºhren
// Kopiere diesen Code in die Browser-Entwicklertools Konsole

function debugGridCollision() {
    console.log("üîç === BROWSER GRID COLLISION DEBUG ===");
    
    // Finde Phaser Game Instance
    if (typeof window.phaserGame === 'undefined') {
        console.log("‚ùå Phaser Game nicht gefunden in window.phaserGame");
        return;
    }
    
    const scene = window.phaserGame.scene.scenes[0]; // BootScene
    
    if (!scene) {
        console.log("‚ùå Scene nicht gefunden");
        return;
    }
    
    console.log("‚úÖ Scene gefunden:", scene.constructor.name);
    
    // Grid pr√ºfen
    if (!scene.grid) {
        console.log("‚ùå Grid nicht initialisiert");
        return;
    }
    
    console.log("‚úÖ Grid gefunden");
    console.log("üìä Grid Info:");
    console.log("- Grid-Gr√∂√üe:", scene.grid.grid.length, "Reihen");
    
    // Z√§hle Bubbles im Grid
    let totalBubbles = 0;
    let bubblesWithGameObjects = 0;
    
    for (let row = 0; row < scene.grid.grid.length; row++) {
        for (let col = 0; col < scene.grid.grid[row].length; col++) {
            const bubble = scene.grid.grid[row][col];
            if (bubble) {
                totalBubbles++;
                if (bubble.gameObject) {
                    bubblesWithGameObjects++;
                }
            }
        }
    }
    
    console.log(`üìä Bubble Statistiken:`);
    console.log(`- Total Bubbles: ${totalBubbles}`);
    console.log(`- Bubbles mit gameObjects: ${bubblesWithGameObjects}`);
    console.log(`- Bubbles ohne gameObjects: ${totalBubbles - bubblesWithGameObjects}`);
    
    // getAllBubbleObjects testen
    const bubbleObjects = scene.grid.getAllBubbleObjects();
    console.log(`üéØ getAllBubbleObjects() Ergebnis: ${bubbleObjects.length} Objekte`);
    
    if (bubbleObjects.length === 0) {
        console.log("‚ùå PROBLEM GEFUNDEN: getAllBubbleObjects() gibt leeres Array zur√ºck!");
        console.log("üîß M√∂gliche Ursachen:");
        console.log("- gameObjects wurden nicht erstellt");
        console.log("- draw() wurde nicht f√ºr alle Bubbles aufgerufen");
        console.log("- Physics Bodies fehlen");
    } else {
        console.log("‚úÖ getAllBubbleObjects() funktioniert korrekt");
    }
    
    // Debug-System pr√ºfen
    if (scene.bubbleDebug) {
        console.log("‚úÖ BubbleDebug System verf√ºgbar");
        scene.bubbleDebug.analyzeGridBubbleObjects();
    } else {
        console.log("‚ùå BubbleDebug System nicht initialisiert");
    }
    
    return {
        totalBubbles,
        bubblesWithGameObjects,
        bubbleObjectsLength: bubbleObjects.length,
        scene: scene
    };
}

// Automatisch alle 3 Sekunden Debug-Info ausgeben
let debugInterval = null;

function startContinuousDebug() {
    if (debugInterval) {
        clearInterval(debugInterval);
    }
    
    console.log("üöÄ Starte kontinuierliches Grid-Debugging...");
    debugInterval = setInterval(() => {
        debugGridCollision();
    }, 3000);
}

function stopContinuousDebug() {
    if (debugInterval) {
        clearInterval(debugInterval);
        debugInterval = null;
        console.log("‚èπÔ∏è Kontinuierliches Debugging gestoppt");
    }
}

// Tastatur-Shortcuts f√ºr Debug
document.addEventListener('keydown', (event) => {
    if (event.key === 'F1') {
        debugGridCollision();
    } else if (event.key === 'F2') {
        startContinuousDebug();
    } else if (event.key === 'F3') {
        stopContinuousDebug();
    }
});

console.log("üîß === BROWSER DEBUG SYSTEM GELADEN ===");
console.log("üìù Verf√ºgbare Befehle:");
console.log("‚Ä¢ debugGridCollision() - Einmalige Grid-Analyse");
console.log("‚Ä¢ startContinuousDebug() - Kontinuierliches Debugging starten");
console.log("‚Ä¢ stopContinuousDebug() - Kontinuierliches Debugging stoppen");
console.log("üìù Tastatur-Shortcuts:");
console.log("‚Ä¢ F1 - Grid Debug ausf√ºhren");
console.log("‚Ä¢ F2 - Kontinuierliches Debug starten");
console.log("‚Ä¢ F3 - Kontinuierliches Debug stoppen");
